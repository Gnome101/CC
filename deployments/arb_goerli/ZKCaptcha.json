{
  "address": "0x2C19584d70F17256014B8215e3C299E7Ae62Be78",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_cookieGame",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "arbNovaDID",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cookieGame",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_origin",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_sender",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        }
      ],
      "name": "handle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interchainSecurityModule",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timeSpent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "validResponse",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0738298b22b73c13cfab10ac8fda10bf03a6dec446e2e126e0d7077c8d4006ad",
  "receipt": {
    "to": null,
    "from": "0x19d96301865fdD07427db3c445508A051BC6D352",
    "contractAddress": "0x2C19584d70F17256014B8215e3C299E7Ae62Be78",
    "transactionIndex": 1,
    "gasUsed": "588238",
    "logsBloom": "0x
    "blockHash": "0x8f6766bff15253403bdabc2cdea249160cac1aa9b187dc35985815d9b475c116",
    "transactionHash": "0x0738298b22b73c13cfab10ac8fda10bf03a6dec446e2e126e0d7077c8d4006ad",
    "logs": [],
    "blockNumber": 17636488,
    "cumulativeGasUsed": "588238",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4f543bcd78b481Ae004De7fA02034950E80F2747"
  ],
  "numDeployments": 8,
  "solcInputHash": "7275461c29acec8166cdafbd2950e6ba",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cookieGame\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"arbNovaDID\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cookieGame\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_origin\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_sender\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"handle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interchainSecurityModule\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeSpent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validResponse\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ZKCaptcha.sol\":\"ZKCaptcha\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"contracts/Interfaces/IInterchainSecurityModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\ninterface IInterchainSecurityModule {\\n    enum Types {\\n        UNUSED,\\n        ROUTING,\\n        AGGREGATION,\\n        LEGACY_MULTISIG,\\n        MULTISIG\\n    }\\n\\n    /**\\n     * @notice Returns an enum that represents the type of security model\\n     * encoded by this ISM.\\n     * @dev Relayers infer how to fetch and format metadata.\\n     */\\n    function moduleType() external view returns (uint8);\\n\\n    /**\\n     * @notice Defines a security model responsible for verifying interchain\\n     * messages based on the provided metadata.\\n     * @param _metadata Off-chain metadata provided by a relayer, specific to\\n     * the security model encoded by the module (e.g. validator signatures)\\n     * @param _message Hyperlane encoded interchain message\\n     * @return True if the message was verified\\n     */\\n    function verify(\\n        bytes calldata _metadata,\\n        bytes calldata _message\\n    ) external returns (bool);\\n}\\n\\ninterface ISpecifiesInterchainSecurityModule {\\n    function interchainSecurityModule()\\n        external\\n        view\\n        returns (IInterchainSecurityModule);\\n}\\n\",\"keccak256\":\"0xec1eddad4089332bc7f3ee8a5d0d77913e44e5549a49b2111aacf440e1ec4345\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/Interfaces/IMailbox.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.8.0;\\n\\nimport {IInterchainSecurityModule} from \\\"./IInterchainSecurityModule.sol\\\";\\n\\ninterface IMailbox {\\n    // ============ Events ============\\n    /**\\n     * @notice Emitted when a new message is dispatched via Hyperlane\\n     * @param sender The address that dispatched the message\\n     * @param destination The destination domain of the message\\n     * @param recipient The message recipient address on `destination`\\n     * @param message Raw bytes of message\\n     */\\n    event Dispatch(\\n        address indexed sender,\\n        uint32 indexed destination,\\n        bytes32 indexed recipient,\\n        bytes message\\n    );\\n\\n    /**\\n     * @notice Emitted when a new message is dispatched via Hyperlane\\n     * @param messageId The unique message identifier\\n     */\\n    event DispatchId(bytes32 indexed messageId);\\n\\n    /**\\n     * @notice Emitted when a Hyperlane message is processed\\n     * @param messageId The unique message identifier\\n     */\\n    event ProcessId(bytes32 indexed messageId);\\n\\n    /**\\n     * @notice Emitted when a Hyperlane message is delivered\\n     * @param origin The origin domain of the message\\n     * @param sender The message sender address on `origin`\\n     * @param recipient The address that handled the message\\n     */\\n    event Process(\\n        uint32 indexed origin,\\n        bytes32 indexed sender,\\n        address indexed recipient\\n    );\\n\\n    function localDomain() external view returns (uint32);\\n\\n    function delivered(bytes32 messageId) external view returns (bool);\\n\\n    function defaultIsm() external view returns (IInterchainSecurityModule);\\n\\n    function dispatch(\\n        uint32 _destinationDomain,\\n        bytes32 _recipientAddress,\\n        bytes calldata _messageBody\\n    ) external returns (bytes32);\\n\\n    function process(\\n        bytes calldata _metadata,\\n        bytes calldata _message\\n    ) external;\\n\\n    function count() external view returns (uint32);\\n\\n    function root() external view returns (bytes32);\\n\\n    function latestCheckpoint() external view returns (bytes32, uint32);\\n\\n    function recipientIsm(\\n        address _recipient\\n    ) external view returns (IInterchainSecurityModule);\\n}\\n\",\"keccak256\":\"0x2b74aa2bc94ce4224e8841fdf48ab0b4e61dbbf0f4aea0fb5049e11bcdb6f1c5\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/Interfaces/IMessageRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\ninterface IMessageRecipient {\\n    function handle(\\n        uint32 _origin,\\n        bytes32 _sender,\\n        bytes calldata _message\\n    ) external;\\n}\\n\",\"keccak256\":\"0x250fabee11ab22fc3cb14ba0ff86410f681e621c43590c24ecbcf48fea8c7e70\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/Interfaces/ZKaptchaInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\n//Users can upgrade their cookie and earn more\\n//For example, a user can do a cursor upgrade and earn 0.1 cookies per second\\n//Users are given an ERC20 token called cookies(right now just points)\\ninterface ZKaptchaInterface {\\n    function verifyZkProof(bytes calldata zkProof) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x489e67a625c3c0390f50c0210b8a78b06d9016c23db770b9d3854610c953f154\",\"license\":\"MIT\"},\"contracts/ZKCaptcha.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\nimport \\\"./Interfaces/IMailbox.sol\\\";\\nimport \\\"./Interfaces/IInterchainSecurityModule.sol\\\";\\nimport \\\"./Interfaces/IMessageRecipient.sol\\\";\\nimport \\\"./Interfaces/ZKaptchaInterface.sol\\\";\\n\\ncontract ZKCaptcha {\\n    address immutable dev;\\n    address public immutable cookieGame;\\n    ZKaptchaInterface immutable zkaptcha;\\n    IMailbox immutable mailBox;\\n\\n    uint32 public constant arbNovaDID = 42170;\\n\\n    modifier onlyDev() {\\n        //The game only works if a session was started\\n        require(msg.sender == dev);\\n        _;\\n    }\\n\\n    constructor(address _cookieGame) {\\n        dev = msg.sender;\\n        cookieGame = _cookieGame;\\n        zkaptcha = ZKaptchaInterface(\\n            0xf5DCa59461adFFF5089BE5068364eC10B86c2a88 //zKaptcha contract\\n        );\\n        mailBox = IMailbox(0xCC737a94FecaeC165AbCf12dED095BB13F037685); //Arbitum Goerli Mailbox\\n    }\\n\\n    mapping(address => uint256) userCaptchaStart;\\n    uint256 public timeSpent;\\n\\n    function submitCaptcha(bytes memory proof) internal {\\n        require(zkaptcha.verifyZkProof(proof));\\n        timeSpent = block.timestamp - userCaptchaStart[msg.sender];\\n    }\\n\\n    uint256 public requests;\\n    bool public validResponse;\\n    mapping(address => bytes) public userData;\\n\\n    function handle(\\n        uint32 _origin,\\n        bytes32 _sender,\\n        bytes calldata _message\\n    ) external {\\n        require(msg.sender == address(mailBox));\\n        require(_origin == uint32(arbNovaDID));\\n        requests = requests + 1;\\n        (bytes memory res, address user) = abi.decode(\\n            _message,\\n            (bytes, address)\\n        );\\n        bytes memory newMessage = abi.encodePacked(res);\\n        try zkaptcha.verifyZkProof(newMessage) returns (bool) {\\n            validResponse = zkaptcha.verifyZkProof(newMessage);\\n        } catch {\\n            validResponse = false;\\n        }\\n        if (validResponse) {\\n            uint256 num = 2;\\n            bytes memory response = abi.encode(num, user);\\n            mailBox.dispatch(\\n                arbNovaDID,\\n                addressToBytes32(cookieGame),\\n                response\\n            );\\n        } else {\\n            uint256 num = 1;\\n            bytes memory response = abi.encode(num, user);\\n            mailBox.dispatch(\\n                arbNovaDID,\\n                addressToBytes32(cookieGame),\\n                response\\n            );\\n        }\\n    }\\n\\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\\n        return bytes32(uint256(uint160(_addr)));\\n    }\\n\\n    function bytes32ToAddress(bytes32 _buf) internal pure returns (address) {\\n        return address(uint160(uint256(_buf)));\\n    }\\n\\n    function interchainSecurityModule() external pure returns (address) {\\n        return 0x963C7950B97e2ce301Eb49Fb1928aA5C7fe8e8eC;\\n    }\\n}\\n\",\"keccak256\":\"0x95db2ad6783befa82fbec46739e6243e74225a614ff6831493d52ba6f90d5b65\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61010060405234801561001157600080fd5b50604051610aac380380610aac83398101604081905261003091610075565b336080526001600160a01b031660a05273f5dca59461adfff5089be5068364ec10b86c2a8860c05273cc737a94fecaec165abcf12ded095bb13f03768560e0526100a5565b60006020828403121561008757600080fd5b81516001600160a01b038116811461009e57600080fd5b9392505050565b60805160a05160c05160e0516109af6100fd600039600081816101a0015281816104170152610524015260008181610262015261032001526000818160fe0152818161044901526105560152600050506109af6000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063ab10e69a1161005b578063ab10e69a146100f9578063b74cb2db14610145578063c89109131461014e578063de523cf31461016e57600080fd5b806301e5a36e1461008d57806356d5d475146100b05780635fdba839146100c55780639e8763d9146100dc575b600080fd5b61009661a4ba81565b60405163ffffffff90911681526020015b60405180910390f35b6100c36100be36600461066d565b610188565b005b6100ce60015481565b6040519081526020016100a7565b6003546100e99060ff1681565b60405190151581526020016100a7565b6101207f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100a7565b6100ce60025481565b61016161015c366004610724565b6105d3565b6040516100a79190610798565b73963c7950b97e2ce301eb49fb1928aa5c7fe8e8ec610120565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146101ca57600080fd5b63ffffffff841661a4ba146101de57600080fd5b6002546101ec9060016107ab565b6002556000806101fe838501856107f8565b9150915060008260405160200161021591906108ba565b60408051601f19818403018152908290527f8c346a5d000000000000000000000000000000000000000000000000000000008252915073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690638c346a5d90610297908490600401610798565b602060405180830381865afa9250505080156102d0575060408051601f3d908101601f191682019092526102cd918101906108d6565b60015b6102e3576003805460ff191690556103a9565b6040517f8c346a5d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690638c346a5d90610355908590600401610798565b602060405180830381865afa158015610372573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039691906108d6565b6003805460ff1916911515919091179055505b60035460ff16156104c1576040805160026020820181905273ffffffffffffffffffffffffffffffffffffffff8581168385015283518084038501815260608401948590527ffa31de01000000000000000000000000000000000000000000000000000000009094529092917f000000000000000000000000000000000000000000000000000000000000000082169163fa31de01916104769161a4ba917f00000000000000000000000000000000000000000000000000000000000000009091169086906064016108f8565b6020604051808303816000875af1158015610495573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b99190610926565b5050506105ca565b6040805160016020820181905273ffffffffffffffffffffffffffffffffffffffff8581168385015283518084038501815260608401948590527ffa31de01000000000000000000000000000000000000000000000000000000009094529092917f000000000000000000000000000000000000000000000000000000000000000082169163fa31de01916105839161a4ba917f00000000000000000000000000000000000000000000000000000000000000009091169086906064016108f8565b6020604051808303816000875af11580156105a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c69190610926565b5050505b50505050505050565b600460205260009081526040902080546105ec9061093f565b80601f01602080910402602001604051908101604052809291908181526020018280546106189061093f565b80156106655780601f1061063a57610100808354040283529160200191610665565b820191906000526020600020905b81548152906001019060200180831161064857829003601f168201915b505050505081565b6000806000806060858703121561068357600080fd5b843563ffffffff8116811461069757600080fd5b935060208501359250604085013567ffffffffffffffff808211156106bb57600080fd5b818701915087601f8301126106cf57600080fd5b8135818111156106de57600080fd5b8860208285010111156106f057600080fd5b95989497505060200194505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461072157600080fd5b50565b60006020828403121561073657600080fd5b8135610741816106ff565b9392505050565b60005b8381101561076357818101518382015260200161074b565b50506000910152565b60008151808452610784816020860160208601610748565b601f01601f19169290920160200192915050565b602081526000610741602083018461076c565b808201808211156107cc57634e487b7160e01b600052601160045260246000fd5b92915050565b634e487b7160e01b600052604160045260246000fd5b80356107f3816106ff565b919050565b6000806040838503121561080b57600080fd5b823567ffffffffffffffff8082111561082357600080fd5b818501915085601f83011261083757600080fd5b813581811115610849576108496107d2565b604051601f8201601f19908116603f01168101908382118183101715610871576108716107d2565b8160405282815288602084870101111561088a57600080fd5b8260208601602083013760006020848301015280965050505050506108b1602084016107e8565b90509250929050565b600082516108cc818460208701610748565b9190910192915050565b6000602082840312156108e857600080fd5b8151801515811461074157600080fd5b63ffffffff8416815282602082015260606040820152600061091d606083018461076c565b95945050505050565b60006020828403121561093857600080fd5b5051919050565b600181811c9082168061095357607f821691505b60208210810361097357634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220899139dc9d942207e0906b3c0cb84facee1e1015615b87d2791af5353abc892864736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063ab10e69a1161005b578063ab10e69a146100f9578063b74cb2db14610145578063c89109131461014e578063de523cf31461016e57600080fd5b806301e5a36e1461008d57806356d5d475146100b05780635fdba839146100c55780639e8763d9146100dc575b600080fd5b61009661a4ba81565b60405163ffffffff90911681526020015b60405180910390f35b6100c36100be36600461066d565b610188565b005b6100ce60015481565b6040519081526020016100a7565b6003546100e99060ff1681565b60405190151581526020016100a7565b6101207f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100a7565b6100ce60025481565b61016161015c366004610724565b6105d3565b6040516100a79190610798565b73963c7950b97e2ce301eb49fb1928aa5c7fe8e8ec610120565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146101ca57600080fd5b63ffffffff841661a4ba146101de57600080fd5b6002546101ec9060016107ab565b6002556000806101fe838501856107f8565b9150915060008260405160200161021591906108ba565b60408051601f19818403018152908290527f8c346a5d000000000000000000000000000000000000000000000000000000008252915073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690638c346a5d90610297908490600401610798565b602060405180830381865afa9250505080156102d0575060408051601f3d908101601f191682019092526102cd918101906108d6565b60015b6102e3576003805460ff191690556103a9565b6040517f8c346a5d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690638c346a5d90610355908590600401610798565b602060405180830381865afa158015610372573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039691906108d6565b6003805460ff1916911515919091179055505b60035460ff16156104c1576040805160026020820181905273ffffffffffffffffffffffffffffffffffffffff8581168385015283518084038501815260608401948590527ffa31de01000000000000000000000000000000000000000000000000000000009094529092917f000000000000000000000000000000000000000000000000000000000000000082169163fa31de01916104769161a4ba917f00000000000000000000000000000000000000000000000000000000000000009091169086906064016108f8565b6020604051808303816000875af1158015610495573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b99190610926565b5050506105ca565b6040805160016020820181905273ffffffffffffffffffffffffffffffffffffffff8581168385015283518084038501815260608401948590527ffa31de01000000000000000000000000000000000000000000000000000000009094529092917f000000000000000000000000000000000000000000000000000000000000000082169163fa31de01916105839161a4ba917f00000000000000000000000000000000000000000000000000000000000000009091169086906064016108f8565b6020604051808303816000875af11580156105a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c69190610926565b5050505b50505050505050565b600460205260009081526040902080546105ec9061093f565b80601f01602080910402602001604051908101604052809291908181526020018280546106189061093f565b80156106655780601f1061063a57610100808354040283529160200191610665565b820191906000526020600020905b81548152906001019060200180831161064857829003601f168201915b505050505081565b6000806000806060858703121561068357600080fd5b843563ffffffff8116811461069757600080fd5b935060208501359250604085013567ffffffffffffffff808211156106bb57600080fd5b818701915087601f8301126106cf57600080fd5b8135818111156106de57600080fd5b8860208285010111156106f057600080fd5b95989497505060200194505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461072157600080fd5b50565b60006020828403121561073657600080fd5b8135610741816106ff565b9392505050565b60005b8381101561076357818101518382015260200161074b565b50506000910152565b60008151808452610784816020860160208601610748565b601f01601f19169290920160200192915050565b602081526000610741602083018461076c565b808201808211156107cc57634e487b7160e01b600052601160045260246000fd5b92915050565b634e487b7160e01b600052604160045260246000fd5b80356107f3816106ff565b919050565b6000806040838503121561080b57600080fd5b823567ffffffffffffffff8082111561082357600080fd5b818501915085601f83011261083757600080fd5b813581811115610849576108496107d2565b604051601f8201601f19908116603f01168101908382118183101715610871576108716107d2565b8160405282815288602084870101111561088a57600080fd5b8260208601602083013760006020848301015280965050505050506108b1602084016107e8565b90509250929050565b600082516108cc818460208701610748565b9190910192915050565b6000602082840312156108e857600080fd5b8151801515811461074157600080fd5b63ffffffff8416815282602082015260606040820152600061091d606083018461076c565b95945050505050565b60006020828403121561093857600080fd5b5051919050565b600181811c9082168061095357607f821691505b60208210810361097357634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220899139dc9d942207e0906b3c0cb84facee1e1015615b87d2791af5353abc892864736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1244,
        "contract": "contracts/ZKCaptcha.sol:ZKCaptcha",
        "label": "userCaptchaStart",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1246,
        "contract": "contracts/ZKCaptcha.sol:ZKCaptcha",
        "label": "timeSpent",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1271,
        "contract": "contracts/ZKCaptcha.sol:ZKCaptcha",
        "label": "requests",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1273,
        "contract": "contracts/ZKCaptcha.sol:ZKCaptcha",
        "label": "validResponse",
        "offset": 0,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 1277,
        "contract": "contracts/ZKCaptcha.sol:ZKCaptcha",
        "label": "userData",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bytes_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}