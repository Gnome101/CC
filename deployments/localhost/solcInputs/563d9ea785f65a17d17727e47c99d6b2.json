{
  "language": "Solidity",
  "sources": {
    "contracts/captchaPoints.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.18;\n\n//Users can upgrade their cookie and earn more\n//For example, a user can do a cursor upgrade and earn 0.1 cookies per second\n//Users are given an ERC20 token called cookies(right now just points)\ninterface ZKaptchaInterface {\n    function verifyZkProof(bytes calldata zkProof) external view returns (bool);\n}\n\ncontract CaptchaPoints {\n    address immutable dev;\n    ZKaptchaInterface immutable zkaptcha;\n    modifier onlyDev() {\n        //The game only works if a session was started\n        require(msg.sender == dev);\n        _;\n    }\n\n    constructor() {\n        dev = msg.sender;\n\n        zkaptcha = ZKaptchaInterface(\n            0xf5DCa59461adFFF5089BE5068364eC10B86c2a88\n        );\n    }\n\n    mapping(address => uint256) userCaptchaStart;\n    mapping(address => uint256) userTimeSpent;\n\n    function giveUserCaptcha(address user) public onlyDev {\n        userCaptchaStart[user] = block.timestamp;\n    }\n\n    function submitCaptcha(bytes memory proof) public {\n        require(zkaptcha.verifyZkProof(proof));\n        userTimeSpent[msg.sender] =\n            block.timestamp -\n            userCaptchaStart[msg.sender];\n    }\n}\n"
    },
    "contracts/CookieClicker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.18;\n\n//Users can upgrade their cookie and earn more\n//For example, a user can do a cursor upgrade and earn 0.1 cookies per second\n//Users are given an ERC20 token called cookies(right now just points)\ninterface ZKaptchaInterface {\n    function verifyZkProof(bytes calldata zkProof) external view returns (bool);\n}\n\ncontract CookieClicker {\n    address immutable dev;\n    ZKaptchaInterface immutable zkaptcha;\n\n    event captchaNeededForUser(address indexed user);\n\n    modifier sessionStarted(address user) {\n        //The game only works if a session was started\n        require(block.timestamp <= mostRecentUserSession[user].expiraryDate);\n        require(mostRecentUserSession[user].sessionActive);\n        _;\n    }\n    modifier onlyDev() {\n        //The game only works if a session was started\n        require(msg.sender == dev);\n        _;\n    }\n\n    // implement ZKaptcha anti-bot in your smart contract\n\n    constructor() {\n        dev = msg.sender;\n        idToUpgrade[1] = Upgrade(10, 1, 0);\n        idToUpgrade[2] = Upgrade(10, 0, 1);\n        zkaptcha = ZKaptchaInterface(\n            0xf5DCa59461adFFF5089BE5068364eC10B86c2a88\n        );\n    }\n\n    mapping(address => cookieGame) public userCookie;\n    mapping(address => GameSession) public mostRecentUserSession;\n    uint256 public d;\n    mapping(uint256 => Upgrade) public idToUpgrade;\n    mapping(address => mapping(uint256 => uint256)) public idUserToNum; //Tracks the number of purchases of a single upgrade\n\n    struct cookieGame {\n        uint256 totalClicks;\n        uint256 totalSpent;\n        uint256 cookiePerSecond; //Users can earn more per second\n        uint256 interestLastComputed;\n        uint256 clickModifier;\n    }\n    struct GameSession {\n        uint256 expiraryDate;\n        bool sessionActive;\n        bytes32 sessionHash;\n        cookieGame sessionGame;\n        uint256 userInterest;\n    }\n    struct Upgrade {\n        //Turn into NFT in future\n        uint256 cost;\n        uint256 cookieRateBooster;\n        uint256 clickModiferBooster;\n    }\n\n    function createCookie() public {\n        //Make sure user does block.timestamp first\n        userCookie[msg.sender] = cookieGame(0, 0, 0, block.timestamp, 0);\n    }\n\n    function click() public {\n        userCookie[msg.sender].totalClicks +=\n            1 +\n            userCookie[msg.sender].clickModifier;\n    }\n\n    function simulateClick(\n        address user\n    ) public view returns (uint256 clickAmount) {\n        clickAmount +=\n            1 +\n            mostRecentUserSession[user].sessionGame.clickModifier;\n    }\n\n    mapping(address => uint256) userCaptchaStart;\n\n    function callForCaptcha(address user) public onlyDev {\n        //emit event()\n        emit captchaNeededForUser(user);\n    }\n\n    function addClick(\n        address user,\n        uint256 clickAmount\n    ) public sessionStarted(user) {\n        mostRecentUserSession[user].sessionGame.totalClicks += clickAmount;\n    }\n\n    //Might make it so that a user has to send a transaction when they purchase an upgrade\n    //Whenever a user purchases a cookie, the program adds up their interest\n    function purchaseUpgrade(uint256 upgradeID) public {\n        idUserToNum[msg.sender][upgradeID]++;\n        uint256 cookieBalance = getUserCookieBalance(msg.sender);\n        userCookie[msg.sender].interestLastComputed = block.timestamp;\n        require(cookieBalance >= idToUpgrade[upgradeID].cost);\n        userCookie[msg.sender].totalSpent +=\n            idToUpgrade[upgradeID].cost *\n            idUserToNum[msg.sender][upgradeID];\n        userCookie[msg.sender].cookiePerSecond += idToUpgrade[upgradeID]\n            .cookieRateBooster;\n        userCookie[msg.sender].clickModifier += idToUpgrade[upgradeID]\n            .clickModiferBooster;\n    }\n\n    function purchaseUpgradeForUser(\n        address user,\n        uint256 upgradeID\n    ) public onlyDev {\n        //We are going to be applying a debt to the user\n        idUserToNum[msg.sender][upgradeID]++;\n        require(idToUpgrade[upgradeID].cost > 0, \"Not Real ID\");\n        mostRecentUserSession[user].sessionGame.totalSpent +=\n            idToUpgrade[upgradeID].cost *\n            idUserToNum[msg.sender][upgradeID];\n        mostRecentUserSession[user].userInterest = getSessionUserInterest(user);\n\n        //require(cookieBalance >= idToUpgrade[upgradeID].cost);\n        mostRecentUserSession[user].sessionGame.cookiePerSecond += idToUpgrade[\n            upgradeID\n        ].cookieRateBooster;\n        mostRecentUserSession[user].sessionGame.clickModifier += idToUpgrade[\n            upgradeID\n        ].clickModiferBooster;\n        userCookie[user].interestLastComputed = block.timestamp; //Resetting interest\n    }\n\n    function getSessionUserInterest(\n        address user\n    ) public view returns (uint256 interestEarned) {\n        uint256 timePassed = block.timestamp -\n            userCookie[user].interestLastComputed;\n\n        interestEarned =\n            timePassed *\n            mostRecentUserSession[user].sessionGame.cookiePerSecond;\n    }\n\n    function getUserInterest(\n        address user\n    ) public view returns (uint256 interestEarned) {\n        uint256 timePassed = block.timestamp -\n            userCookie[user].interestLastComputed;\n\n        interestEarned = timePassed * userCookie[user].cookiePerSecond;\n        if (mostRecentUserSession[user].sessionActive) interestEarned = 0; //If there is already a session then dont count regular interest NO DOUBLE DIPPING\n    }\n\n    function getUserCookieBalance(\n        address user\n    ) public view returns (uint256 cookieBalance) {\n        cookieGame memory currentGame = userCookie[user];\n        uint256 interestEarned = getUserInterest(user);\n        cookieBalance =\n            currentGame.totalClicks -\n            currentGame.totalSpent +\n            interestEarned;\n    }\n\n    function startSession(bytes32 createdHash, uint256 sessionLength) public {\n        mostRecentUserSession[msg.sender].sessionHash = createdHash;\n        mostRecentUserSession[msg.sender].expiraryDate =\n            block.timestamp +\n            sessionLength;\n        //Set the session cookie rate as the users current rate\n        mostRecentUserSession[msg.sender]\n            .sessionGame\n            .cookiePerSecond = userCookie[msg.sender].cookiePerSecond;\n        //Set the session click modifier as the user's current modifier\n        mostRecentUserSession[msg.sender]\n            .sessionGame\n            .clickModifier = userCookie[msg.sender].clickModifier;\n\n        mostRecentUserSession[msg.sender].sessionActive = true;\n    }\n\n    function createHash(\n        uint256 browserID,\n        address userAddy\n    ) public pure returns (bytes32 newHash) {\n        newHash = keccak256(abi.encodePacked(browserID, userAddy));\n    }\n\n    function verifySession(\n        uint256 browserID, //We can make this bytes\n        address userAddy\n    ) public view returns (bool valid) {\n        valid = mostRecentUserSession[userAddy].sessionHash ==\n            keccak256(abi.encodePacked(browserID, userAddy))\n            ? true\n            : false;\n    }\n\n    function endSession() public {\n        //Allows a user to end a session and prevent it from happening\n        mostRecentUserSession[msg.sender].sessionActive = false;\n        //We could have an event fire off or something\n    }\n\n    function completeSession(\n        uint256 browserID,\n        address userAddress\n    ) public onlyDev sessionStarted(userAddress) {\n        require(verifySession(browserID, userAddress));\n        userCookie[userAddress].totalClicks += mostRecentUserSession[\n            userAddress\n        ].sessionGame.totalClicks;\n        uint256 userDebt = mostRecentUserSession[userAddress]\n            .sessionGame\n            .totalSpent;\n        uint256 userInterest = mostRecentUserSession[userAddress].userInterest;\n\n        require(getUserCookieBalance(userAddress) + userInterest >= userDebt);\n        userCookie[userAddress].totalSpent += userDebt;\n        userCookie[userAddress].clickModifier = mostRecentUserSession[\n            userAddress\n        ].sessionGame.clickModifier;\n        userCookie[userAddress].cookiePerSecond = mostRecentUserSession[\n            userAddress\n        ].sessionGame.cookiePerSecond;\n        mostRecentUserSession[userAddress].sessionActive = false;\n        userCookie[userAddress].interestLastComputed = block.timestamp; //Resetting interest\n\n        delete mostRecentUserSession[userAddress];\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 2000,
      "details": {
        "yul": true
      }
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}