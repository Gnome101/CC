{
  "language": "Solidity",
  "sources": {
    "contracts/CookieClicker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.18;\n\n//Users can upgrade their cookie and earn more\n//For example, a user can do a cursor upgrade and earn 0.1 cookies per second\n//Users are given an ERC20 token called cookies(right now just points)\ncontract CookieClicker {\n    constructor() {\n        idToUpgrade[1] = Upgrade(10, 1, 0);\n        idToUpgrade[2] = Upgrade(10, 0, 1);\n    }\n\n    mapping(address => CookieGame) public userCookie;\n    mapping(uint256 => Upgrade) public idToUpgrade;\n    struct CookieGame {\n        uint256 totalClicks;\n        uint256 totalSpent;\n        uint256 cookiePerSecond; //Users can earn more per second\n        uint256 interestLastComputed;\n        uint256 clickModifier;\n    }\n    struct Upgrade {\n        uint256 cost;\n        uint256 cookieRateBooster;\n        uint256 clickModiferBooster;\n    }\n\n    function createCookie() public {\n        userCookie[msg.sender] = CookieGame(0, 0, 0, block.timestamp, 0);\n    }\n\n    function click() public {\n        userCookie[msg.sender].totalClicks +=\n            1 +\n            userCookie[msg.sender].clickModifier;\n    }\n\n    //Whenever a user purchases a cookie, the program adds up their interest\n    function purchaseUpgrade(uint256 upgradeID) public {\n        uint256 cookieBalance = getUserCookieBalance();\n        userCookie[msg.sender].interestLastComputed = block.timestamp;\n        require(cookieBalance >= idToUpgrade[upgradeID].cost);\n        userCookie[msg.sender].totalSpent += idToUpgrade[upgradeID].cost;\n        userCookie[msg.sender].cookiePerSecond += idToUpgrade[upgradeID]\n            .cookieRateBooster;\n        userCookie[msg.sender].clickModifier += idToUpgrade[upgradeID]\n            .clickModiferBooster;\n    }\n\n    function getUserCookieBalance()\n        public\n        view\n        returns (uint256 cookieBalance)\n    {\n        CookieGame memory currentGame = userCookie[msg.sender];\n        uint256 timePassed = block.timestamp - currentGame.interestLastComputed;\n        uint256 interestEarned = timePassed * currentGame.cookiePerSecond;\n        cookieBalance =\n            currentGame.totalClicks -\n            currentGame.totalSpent +\n            interestEarned;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 2000,
      "details": {
        "yul": true
      }
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}