{
  "address": "0x4f543bcd78b481Ae004De7fA02034950E80F2747",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "arbogerliMailBoxAddy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "argbGoerliQueryAddy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "arbGasAddy",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "captchaNeededForUser",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "correct",
          "type": "bool"
        }
      ],
      "name": "userDidCaptcha",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "arbGoerliDomainID",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "click",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "browserID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "completeSession",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createCookie",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "browserID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "userAddy",
          "type": "address"
        }
      ],
      "name": "createHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "newHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endSession",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getSessionUserInterest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "interestEarned",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserCookieBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "cookieBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserInterest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "interestEarned",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "giveUserCaptcha",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_origin",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_sender",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        }
      ],
      "name": "handle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "idToUpgrade",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "cost",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cookieRateBooster",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "clickModiferBooster",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "idUserToNum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interchainGasPaymaster",
      "outputs": [
        {
          "internalType": "contract IInterchainGasPaymaster",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interchainSecurityModule",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "mostRecentUserSession",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "expiraryDate",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "sessionActive",
          "type": "bool"
        },
        {
          "internalType": "bytes32",
          "name": "sessionHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalClicks",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalSpent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cookiePerSecond",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interestLastComputed",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "clickModifier",
              "type": "uint256"
            }
          ],
          "internalType": "struct CookieClicker.cookieGame",
          "name": "sessionGame",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "userInterest",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numRes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "upgradeID",
          "type": "uint256"
        }
      ],
      "name": "purchaseUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "upgradeID",
          "type": "uint256"
        }
      ],
      "name": "purchaseUpgradeForUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "queryRouter",
      "outputs": [
        {
          "internalType": "contract IInterchainQueryRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "returnedNum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "simulateClick",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "clickAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "createdHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "sessionLength",
          "type": "uint256"
        }
      ],
      "name": "startSession",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_destinationDomain",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "captchaContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "gasAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "submitCaptcha",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timeSpent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "user",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userCaptchaInfo",
      "outputs": [
        {
          "internalType": "bool",
          "name": "finished",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "captchaStart",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "captchEnd",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userCookie",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalClicks",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalSpent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cookiePerSecond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestLastComputed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "clickModifier",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "browserID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "userAddy",
          "type": "address"
        }
      ],
      "name": "verifySession",
      "outputs": [
        {
          "internalType": "bool",
          "name": "valid",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "worked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5619a2ed8669f01e3cc7b18aa38654794425ec589b14e464b671af467359182b",
  "receipt": {
    "to": null,
    "from": "0x19d96301865fdD07427db3c445508A051BC6D352",
    "contractAddress": "0x4f543bcd78b481Ae004De7fA02034950E80F2747",
    "transactionIndex": 1,
    "gasUsed": "1867172",
    "logsBloom": "0x
    "blockHash": "0x6553a87785c7dc1e768a3f317666005d37ae3075b45542eace37312e5338c1e6",
    "transactionHash": "0x5619a2ed8669f01e3cc7b18aa38654794425ec589b14e464b671af467359182b",
    "logs": [],
    "blockNumber": 6598693,
    "cumulativeGasUsed": "1867172",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x89A35bc404a44c1493223079cD05a0d020076b06",
    "0x4266D8Dd66D8Eb3934c8942968d1e54214D072d3",
    "0xFc930571619B41A71a25b090eF1a9033ce93d3A8"
  ],
  "numDeployments": 21,
  "solcInputHash": "7275461c29acec8166cdafbd2950e6ba",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"arbogerliMailBoxAddy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"argbGoerliQueryAddy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"arbGasAddy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"captchaNeededForUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"correct\",\"type\":\"bool\"}],\"name\":\"userDidCaptcha\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"arbGoerliDomainID\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"click\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"browserID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"completeSession\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createCookie\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"browserID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddy\",\"type\":\"address\"}],\"name\":\"createHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"newHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endSession\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getSessionUserInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"interestEarned\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserCookieBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cookieBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"interestEarned\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"giveUserCaptcha\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_origin\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_sender\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"handle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToUpgrade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cookieRateBooster\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"clickModiferBooster\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idUserToNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interchainGasPaymaster\",\"outputs\":[{\"internalType\":\"contract IInterchainGasPaymaster\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interchainSecurityModule\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mostRecentUserSession\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"expiraryDate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sessionActive\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"sessionHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalClicks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSpent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cookiePerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestLastComputed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"clickModifier\",\"type\":\"uint256\"}],\"internalType\":\"struct CookieClicker.cookieGame\",\"name\":\"sessionGame\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"userInterest\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numRes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"upgradeID\",\"type\":\"uint256\"}],\"name\":\"purchaseUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"upgradeID\",\"type\":\"uint256\"}],\"name\":\"purchaseUpgradeForUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queryRouter\",\"outputs\":[{\"internalType\":\"contract IInterchainQueryRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnedNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"simulateClick\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"clickAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"createdHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"sessionLength\",\"type\":\"uint256\"}],\"name\":\"startSession\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"captchaContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gasAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"submitCaptcha\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeSpent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"user\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userCaptchaInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"finished\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"captchaStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"captchEnd\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userCookie\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalClicks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSpent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cookiePerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestLastComputed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"clickModifier\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"browserID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddy\",\"type\":\"address\"}],\"name\":\"verifySession\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"worked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CookieClicker.sol\":\"CookieClicker\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"contracts/CookieClicker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\nimport \\\"./Interfaces/IMailbox.sol\\\";\\nimport \\\"./Interfaces/IMessageRecipient.sol\\\";\\nimport \\\"./Interfaces/IInterchainGasPaymaster.sol\\\";\\nimport \\\"./Interfaces/IInterchainQueryRouter.sol\\\";\\n\\n//Users can upgrade their cookie and earn more\\n//For example, a user can do a cursor upgrade and earn 0.1 cookies per second\\n//Users are given an ERC20 token called cookies(right now just points)\\ninterface ZKaptchaInterface {\\n    function verifyZkProof(bytes calldata zkProof) external view returns (bool);\\n}\\n\\ncontract CookieClicker {\\n    address immutable dev;\\n    IMailbox immutable mailBox;\\n    IInterchainQueryRouter public immutable queryRouter;\\n    IInterchainGasPaymaster public immutable interchainGasPaymaster;\\n    event captchaNeededForUser(address indexed user);\\n\\n    modifier sessionStarted(address user) {\\n        //The game only works if a session was started\\n        require(block.timestamp <= mostRecentUserSession[user].expiraryDate);\\n        require(mostRecentUserSession[user].sessionActive);\\n        _;\\n    }\\n    modifier onlyDev() {\\n        //The game only works if a session was started\\n        require(msg.sender == dev);\\n        _;\\n    }\\n    modifier userHasStarted(address user) {\\n        if (userCookie[user].interestLastComputed == 0) {\\n            //If user has not started, then give set them at current timestamp\\n            userCookie[user].interestLastComputed = block.timestamp;\\n        }\\n        _;\\n    }\\n    uint32 public constant arbGoerliDomainID = 421613;\\n\\n    // implement ZKaptcha anti-bot in your smart contract\\n\\n    constructor(\\n        address arbogerliMailBoxAddy,\\n        address argbGoerliQueryAddy,\\n        address arbGasAddy\\n    ) {\\n        dev = msg.sender;\\n        idToUpgrade[1] = Upgrade(10, 1, 0);\\n        idToUpgrade[2] = Upgrade(10, 0, 1);\\n        queryRouter = IInterchainQueryRouter(argbGoerliQueryAddy);\\n        mailBox = IMailbox(arbogerliMailBoxAddy);\\n        interchainGasPaymaster = IInterchainGasPaymaster(arbGasAddy);\\n    }\\n\\n    mapping(address => cookieGame) public userCookie;\\n    mapping(address => GameSession) public mostRecentUserSession;\\n    mapping(uint256 => Upgrade) public idToUpgrade;\\n    mapping(address => mapping(uint256 => uint256)) public idUserToNum; //Tracks the number of purchases of a single upgrade\\n\\n    struct cookieGame {\\n        uint256 totalClicks;\\n        uint256 totalSpent;\\n        uint256 cookiePerSecond; //Users can earn more per second\\n        uint256 interestLastComputed;\\n        uint256 clickModifier;\\n    }\\n    struct GameSession {\\n        uint256 expiraryDate;\\n        bool sessionActive;\\n        bytes32 sessionHash;\\n        cookieGame sessionGame;\\n        uint256 userInterest;\\n    }\\n    struct Upgrade {\\n        //Turn into NFT in future\\n        uint256 cost;\\n        uint256 cookieRateBooster;\\n        uint256 clickModiferBooster;\\n    }\\n\\n    function createCookie() public userHasStarted(msg.sender) {\\n        //Make sure user does block.timestamp first\\n        userCookie[msg.sender] = cookieGame(0, 0, 0, block.timestamp, 0);\\n    }\\n\\n    function click() public userHasStarted(msg.sender) {\\n        userCookie[msg.sender].totalClicks +=\\n            1 +\\n            userCookie[msg.sender].clickModifier;\\n    }\\n\\n    function simulateClick(\\n        address user\\n    ) public view returns (uint256 clickAmount) {\\n        clickAmount +=\\n            1 +\\n            mostRecentUserSession[user].sessionGame.clickModifier;\\n    }\\n\\n    mapping(address => userCaptchaInformation) public userCaptchaInfo;\\n    uint256 public timeSpent;\\n\\n    function giveUserCaptcha(address user) public onlyDev {\\n        userCaptchaInfo[user] = userCaptchaInformation(\\n            false,\\n            block.timestamp,\\n            0\\n        );\\n    }\\n\\n    struct userCaptchaInformation {\\n        bool finished;\\n        uint256 captchaStart;\\n        uint256 captchEnd;\\n    }\\n\\n    // alignment preserving cast\\n\\n    function submitCaptcha(\\n        uint32 _destinationDomain,\\n        address captchaContract,\\n        uint256 gasAmount,\\n        //string memory message,\\n        bytes memory message,\\n        address user\\n    ) external payable {\\n        bytes32 _messageId = mailBox.dispatch(\\n            arbGoerliDomainID,\\n            addressToBytes32(captchaContract),\\n            abi.encode(message, user)\\n            //abi.encode(message)\\n        );\\n    }\\n\\n    uint256 public returnedNum;\\n    uint256 public worked;\\n    uint256 public numRes;\\n    address public user;\\n    event userDidCaptcha(address user, bool correct);\\n\\n    function handle(\\n        uint32 _origin,\\n        bytes32 _sender,\\n        bytes calldata _message\\n    ) external {\\n        require(msg.sender == address(mailBox));\\n        require(_origin == uint32(arbGoerliDomainID));\\n        worked = 31213;\\n        (numRes, user) = abi.decode(_message, (uint256, address));\\n        if (numRes == 2) {\\n            returnedNum = 321;\\n            userCaptchaInfo[user].captchEnd = block.timestamp;\\n            userCaptchaInfo[user].finished = true;\\n            emit userDidCaptcha(user, true);\\n        }\\n        if (numRes == 1) {\\n            returnedNum = 123;\\n            userCaptchaInfo[user].captchEnd += 1;\\n            userCaptchaInfo[user].finished = false;\\n            emit userDidCaptcha(user, false);\\n        }\\n    }\\n\\n    //Might make it so that a user has to send a transaction when they purchase an upgrade\\n    //Whenever a user purchases a cookie, the program adds up their interest\\n    function purchaseUpgrade(uint256 upgradeID) public {\\n        idUserToNum[msg.sender][upgradeID]++;\\n        uint256 cookieBalance = getUserCookieBalance(msg.sender);\\n        userCookie[msg.sender].interestLastComputed = block.timestamp;\\n        require(cookieBalance >= idToUpgrade[upgradeID].cost);\\n        userCookie[msg.sender].totalSpent +=\\n            idToUpgrade[upgradeID].cost *\\n            idUserToNum[msg.sender][upgradeID];\\n        userCookie[msg.sender].cookiePerSecond += idToUpgrade[upgradeID]\\n            .cookieRateBooster;\\n        userCookie[msg.sender].clickModifier += idToUpgrade[upgradeID]\\n            .clickModiferBooster;\\n    }\\n\\n    function purchaseUpgradeForUser(\\n        address user,\\n        uint256 upgradeID\\n    ) public onlyDev {\\n        //We are going to be applying a debt to the user\\n        idUserToNum[msg.sender][upgradeID]++;\\n        require(idToUpgrade[upgradeID].cost > 0, \\\"Not Real ID\\\");\\n        mostRecentUserSession[user].sessionGame.totalSpent +=\\n            idToUpgrade[upgradeID].cost *\\n            idUserToNum[msg.sender][upgradeID];\\n        mostRecentUserSession[user].userInterest = getSessionUserInterest(user);\\n\\n        //require(cookieBalance >= idToUpgrade[upgradeID].cost);\\n        mostRecentUserSession[user].sessionGame.cookiePerSecond += idToUpgrade[\\n            upgradeID\\n        ].cookieRateBooster;\\n        mostRecentUserSession[user].sessionGame.clickModifier += idToUpgrade[\\n            upgradeID\\n        ].clickModiferBooster;\\n        userCookie[user].interestLastComputed = block.timestamp; //Resetting interest\\n    }\\n\\n    function getSessionUserInterest(\\n        address user\\n    ) public view returns (uint256 interestEarned) {\\n        uint256 timePassed = block.timestamp -\\n            userCookie[user].interestLastComputed;\\n\\n        interestEarned =\\n            timePassed *\\n            mostRecentUserSession[user].sessionGame.cookiePerSecond;\\n    }\\n\\n    function getUserInterest(\\n        address user\\n    ) public view returns (uint256 interestEarned) {\\n        uint256 timePassed = block.timestamp -\\n            userCookie[user].interestLastComputed;\\n\\n        interestEarned = timePassed * userCookie[user].cookiePerSecond;\\n        if (mostRecentUserSession[user].sessionActive) interestEarned = 0; //If there is already a session then dont count regular interest NO DOUBLE DIPPING\\n    }\\n\\n    function getUserCookieBalance(\\n        address user\\n    ) public view returns (uint256 cookieBalance) {\\n        cookieGame memory currentGame = userCookie[user];\\n        uint256 interestEarned = getUserInterest(user);\\n        cookieBalance =\\n            currentGame.totalClicks -\\n            currentGame.totalSpent +\\n            interestEarned;\\n    }\\n\\n    function startSession(\\n        bytes32 createdHash,\\n        uint256 sessionLength\\n    ) public userHasStarted(msg.sender) {\\n        mostRecentUserSession[msg.sender].sessionHash = createdHash;\\n        mostRecentUserSession[msg.sender].expiraryDate =\\n            block.timestamp +\\n            sessionLength;\\n        //Set the session cookie rate as the users current rate\\n        mostRecentUserSession[msg.sender]\\n            .sessionGame\\n            .cookiePerSecond = userCookie[msg.sender].cookiePerSecond;\\n        //Set the session click modifier as the user's current modifier\\n        mostRecentUserSession[msg.sender]\\n            .sessionGame\\n            .clickModifier = userCookie[msg.sender].clickModifier;\\n\\n        mostRecentUserSession[msg.sender].sessionActive = true;\\n    }\\n\\n    function createHash(\\n        uint256 browserID,\\n        address userAddy\\n    ) public pure returns (bytes32 newHash) {\\n        newHash = keccak256(abi.encodePacked(browserID, userAddy));\\n    }\\n\\n    function verifySession(\\n        uint256 browserID, //We can make this bytes\\n        address userAddy\\n    ) public view returns (bool valid) {\\n        valid = mostRecentUserSession[userAddy].sessionHash ==\\n            keccak256(abi.encodePacked(browserID, userAddy))\\n            ? true\\n            : false;\\n    }\\n\\n    function endSession() public {\\n        //Allows a user to end a session and prevent it from happening\\n        mostRecentUserSession[msg.sender].sessionActive = false;\\n        //We could have an event fire off or something\\n    }\\n\\n    function completeSession(\\n        uint256 browserID,\\n        address userAddress\\n    ) public onlyDev sessionStarted(userAddress) {\\n        require(verifySession(browserID, userAddress));\\n        userCookie[userAddress].totalClicks += mostRecentUserSession[\\n            userAddress\\n        ].sessionGame.totalClicks;\\n        uint256 userDebt = mostRecentUserSession[userAddress]\\n            .sessionGame\\n            .totalSpent;\\n        uint256 userInterest = mostRecentUserSession[userAddress].userInterest;\\n\\n        require(getUserCookieBalance(userAddress) + userInterest >= userDebt);\\n        userCookie[userAddress].totalSpent += userDebt;\\n        userCookie[userAddress].clickModifier = mostRecentUserSession[\\n            userAddress\\n        ].sessionGame.clickModifier;\\n        userCookie[userAddress].cookiePerSecond = mostRecentUserSession[\\n            userAddress\\n        ].sessionGame.cookiePerSecond;\\n        mostRecentUserSession[userAddress].sessionActive = false;\\n        userCookie[userAddress].interestLastComputed = block.timestamp; //Resetting interest\\n\\n        delete mostRecentUserSession[userAddress];\\n    }\\n\\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\\n        return bytes32(uint256(uint160(_addr)));\\n    }\\n\\n    function interchainSecurityModule() external pure returns (address) {\\n        return 0x5Fe9b2cAcD42593408A49D97aa061a1666C595E9;\\n    }\\n}\\n\",\"keccak256\":\"0x1e3d977b7004772fb34946b825af28567d00f304e99178252a1633e5c8b9e275\",\"license\":\"MIT\"},\"contracts/Interfaces/IInterchainGasPaymaster.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\n/**\\n * @title IInterchainGasPaymaster\\n * @notice Manages payments on a source chain to cover gas costs of relaying\\n * messages to destination chains.\\n */\\ninterface IInterchainGasPaymaster {\\n    /**\\n     * @notice Emitted when a payment is made for a message's gas costs.\\n     * @param messageId The ID of the message to pay for.\\n     * @param gasAmount The amount of destination gas paid for.\\n     * @param payment The amount of native tokens paid.\\n     */\\n    event GasPayment(\\n        bytes32 indexed messageId,\\n        uint256 gasAmount,\\n        uint256 payment\\n    );\\n\\n    function payForGas(\\n        bytes32 _messageId,\\n        uint32 _destinationDomain,\\n        uint256 _gasAmount,\\n        address _refundAddress\\n    ) external payable;\\n\\n    function quoteGasPayment(\\n        uint32 _destinationDomain,\\n        uint256 _gasAmount\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xea5705377bcae5ff9dee6599d66f88c7e76a61169c2046a5efedcf4034354045\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/Interfaces/IInterchainQueryRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\ninterface IInterchainQueryRouter {\\n    /**\\n     * @param _destinationDomain Domain of destination chain\\n     * @param target The address of the contract to query on destination chain.\\n     * @param queryData The calldata of the view call to make on the destination\\n     * chain.\\n     * @param callback Callback function selector on `msg.sender` and optionally\\n     * abi-encoded prefix arguments.\\n     * @return messageId The ID of the Hyperlane message encoding the query.\\n     */\\n    function query(\\n        uint32 _destinationDomain,\\n        address target,\\n        bytes calldata queryData,\\n        bytes calldata callback\\n    ) external returns (bytes32);\\n\\n    /**\\n     * @param _destinationDomain Domain of destination chain\\n     * @param call The target address of the contract to query on destination\\n     * chain, and the calldata of the view call to make.\\n     * @param callback Callback function selector on `msg.sender` and optionally\\n     * abi-encoded prefix arguments.\\n     * @return messageId The ID of the Hyperlane message encoding the query.\\n     */\\n    function query(\\n        uint32 _destinationDomain,\\n        Call calldata call,\\n        bytes calldata callback\\n    ) external returns (bytes32);\\n\\n    /**\\n     * @param _destinationDomain Domain of destination chain\\n     * @param calls Array of calls (to and data packed struct) to be made on\\n     * destination chain in sequence.\\n     * @param callbacks Array of callback function selectors on `msg.sender`\\n     * and optionally abi-encoded prefix arguments.\\n     */\\n    function query(\\n        uint32 _destinationDomain,\\n        Call[] calldata calls,\\n        bytes[] calldata callbacks\\n    ) external returns (bytes32);\\n\\n    struct Call {\\n        address to;\\n        bytes data;\\n    }\\n}\\n\",\"keccak256\":\"0x81c1f15d54fa907d98dd8ab84ec33d062bb41f63314d7e40bdf490ad3db28244\",\"license\":\"MIT\"},\"contracts/Interfaces/IInterchainSecurityModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\ninterface IInterchainSecurityModule {\\n    enum Types {\\n        UNUSED,\\n        ROUTING,\\n        AGGREGATION,\\n        LEGACY_MULTISIG,\\n        MULTISIG\\n    }\\n\\n    /**\\n     * @notice Returns an enum that represents the type of security model\\n     * encoded by this ISM.\\n     * @dev Relayers infer how to fetch and format metadata.\\n     */\\n    function moduleType() external view returns (uint8);\\n\\n    /**\\n     * @notice Defines a security model responsible for verifying interchain\\n     * messages based on the provided metadata.\\n     * @param _metadata Off-chain metadata provided by a relayer, specific to\\n     * the security model encoded by the module (e.g. validator signatures)\\n     * @param _message Hyperlane encoded interchain message\\n     * @return True if the message was verified\\n     */\\n    function verify(\\n        bytes calldata _metadata,\\n        bytes calldata _message\\n    ) external returns (bool);\\n}\\n\\ninterface ISpecifiesInterchainSecurityModule {\\n    function interchainSecurityModule()\\n        external\\n        view\\n        returns (IInterchainSecurityModule);\\n}\\n\",\"keccak256\":\"0xec1eddad4089332bc7f3ee8a5d0d77913e44e5549a49b2111aacf440e1ec4345\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/Interfaces/IMailbox.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.8.0;\\n\\nimport {IInterchainSecurityModule} from \\\"./IInterchainSecurityModule.sol\\\";\\n\\ninterface IMailbox {\\n    // ============ Events ============\\n    /**\\n     * @notice Emitted when a new message is dispatched via Hyperlane\\n     * @param sender The address that dispatched the message\\n     * @param destination The destination domain of the message\\n     * @param recipient The message recipient address on `destination`\\n     * @param message Raw bytes of message\\n     */\\n    event Dispatch(\\n        address indexed sender,\\n        uint32 indexed destination,\\n        bytes32 indexed recipient,\\n        bytes message\\n    );\\n\\n    /**\\n     * @notice Emitted when a new message is dispatched via Hyperlane\\n     * @param messageId The unique message identifier\\n     */\\n    event DispatchId(bytes32 indexed messageId);\\n\\n    /**\\n     * @notice Emitted when a Hyperlane message is processed\\n     * @param messageId The unique message identifier\\n     */\\n    event ProcessId(bytes32 indexed messageId);\\n\\n    /**\\n     * @notice Emitted when a Hyperlane message is delivered\\n     * @param origin The origin domain of the message\\n     * @param sender The message sender address on `origin`\\n     * @param recipient The address that handled the message\\n     */\\n    event Process(\\n        uint32 indexed origin,\\n        bytes32 indexed sender,\\n        address indexed recipient\\n    );\\n\\n    function localDomain() external view returns (uint32);\\n\\n    function delivered(bytes32 messageId) external view returns (bool);\\n\\n    function defaultIsm() external view returns (IInterchainSecurityModule);\\n\\n    function dispatch(\\n        uint32 _destinationDomain,\\n        bytes32 _recipientAddress,\\n        bytes calldata _messageBody\\n    ) external returns (bytes32);\\n\\n    function process(\\n        bytes calldata _metadata,\\n        bytes calldata _message\\n    ) external;\\n\\n    function count() external view returns (uint32);\\n\\n    function root() external view returns (bytes32);\\n\\n    function latestCheckpoint() external view returns (bytes32, uint32);\\n\\n    function recipientIsm(\\n        address _recipient\\n    ) external view returns (IInterchainSecurityModule);\\n}\\n\",\"keccak256\":\"0x2b74aa2bc94ce4224e8841fdf48ab0b4e61dbbf0f4aea0fb5049e11bcdb6f1c5\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/Interfaces/IMessageRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\ninterface IMessageRecipient {\\n    function handle(\\n        uint32 _origin,\\n        bytes32 _sender,\\n        bytes calldata _message\\n    ) external;\\n}\\n\",\"keccak256\":\"0x250fabee11ab22fc3cb14ba0ff86410f681e621c43590c24ecbcf48fea8c7e70\",\"license\":\"MIT OR Apache-2.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 145,
        "contract": "contracts/CookieClicker.sol:CookieClicker",
        "label": "userCookie",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(cookieGame)172_storage)"
      },
      {
        "astId": 150,
        "contract": "contracts/CookieClicker.sol:CookieClicker",
        "label": "mostRecentUserSession",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(GameSession)184_storage)"
      },
      {
        "astId": 155,
        "contract": "contracts/CookieClicker.sol:CookieClicker",
        "label": "idToUpgrade",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Upgrade)191_storage)"
      },
      {
        "astId": 161,
        "contract": "contracts/CookieClicker.sol:CookieClicker",
        "label": "idUserToNum",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 258,
        "contract": "contracts/CookieClicker.sol:CookieClicker",
        "label": "userCaptchaInfo",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(userCaptchaInformation)286_storage)"
      },
      {
        "astId": 260,
        "contract": "contracts/CookieClicker.sol:CookieClicker",
        "label": "timeSpent",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 317,
        "contract": "contracts/CookieClicker.sol:CookieClicker",
        "label": "returnedNum",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 319,
        "contract": "contracts/CookieClicker.sol:CookieClicker",
        "label": "worked",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 321,
        "contract": "contracts/CookieClicker.sol:CookieClicker",
        "label": "numRes",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 323,
        "contract": "contracts/CookieClicker.sol:CookieClicker",
        "label": "user",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_struct(GameSession)184_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CookieClicker.GameSession)",
        "numberOfBytes": "32",
        "value": "t_struct(GameSession)184_storage"
      },
      "t_mapping(t_address,t_struct(cookieGame)172_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CookieClicker.cookieGame)",
        "numberOfBytes": "32",
        "value": "t_struct(cookieGame)172_storage"
      },
      "t_mapping(t_address,t_struct(userCaptchaInformation)286_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CookieClicker.userCaptchaInformation)",
        "numberOfBytes": "32",
        "value": "t_struct(userCaptchaInformation)286_storage"
      },
      "t_mapping(t_uint256,t_struct(Upgrade)191_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CookieClicker.Upgrade)",
        "numberOfBytes": "32",
        "value": "t_struct(Upgrade)191_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(GameSession)184_storage": {
        "encoding": "inplace",
        "label": "struct CookieClicker.GameSession",
        "members": [
          {
            "astId": 174,
            "contract": "contracts/CookieClicker.sol:CookieClicker",
            "label": "expiraryDate",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 176,
            "contract": "contracts/CookieClicker.sol:CookieClicker",
            "label": "sessionActive",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 178,
            "contract": "contracts/CookieClicker.sol:CookieClicker",
            "label": "sessionHash",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 181,
            "contract": "contracts/CookieClicker.sol:CookieClicker",
            "label": "sessionGame",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(cookieGame)172_storage"
          },
          {
            "astId": 183,
            "contract": "contracts/CookieClicker.sol:CookieClicker",
            "label": "userInterest",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(Upgrade)191_storage": {
        "encoding": "inplace",
        "label": "struct CookieClicker.Upgrade",
        "members": [
          {
            "astId": 186,
            "contract": "contracts/CookieClicker.sol:CookieClicker",
            "label": "cost",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 188,
            "contract": "contracts/CookieClicker.sol:CookieClicker",
            "label": "cookieRateBooster",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 190,
            "contract": "contracts/CookieClicker.sol:CookieClicker",
            "label": "clickModiferBooster",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(cookieGame)172_storage": {
        "encoding": "inplace",
        "label": "struct CookieClicker.cookieGame",
        "members": [
          {
            "astId": 163,
            "contract": "contracts/CookieClicker.sol:CookieClicker",
            "label": "totalClicks",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 165,
            "contract": "contracts/CookieClicker.sol:CookieClicker",
            "label": "totalSpent",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 167,
            "contract": "contracts/CookieClicker.sol:CookieClicker",
            "label": "cookiePerSecond",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 169,
            "contract": "contracts/CookieClicker.sol:CookieClicker",
            "label": "interestLastComputed",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 171,
            "contract": "contracts/CookieClicker.sol:CookieClicker",
            "label": "clickModifier",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(userCaptchaInformation)286_storage": {
        "encoding": "inplace",
        "label": "struct CookieClicker.userCaptchaInformation",
        "members": [
          {
            "astId": 281,
            "contract": "contracts/CookieClicker.sol:CookieClicker",
            "label": "finished",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 283,
            "contract": "contracts/CookieClicker.sol:CookieClicker",
            "label": "captchaStart",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 285,
            "contract": "contracts/CookieClicker.sol:CookieClicker",
            "label": "captchEnd",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}