{
  "language": "Solidity",
  "sources": {
    "contracts/CookieClicker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\nimport \"./Interfaces/IMailbox.sol\";\nimport \"./Interfaces/IMessageRecipient.sol\";\nimport \"./Interfaces/IInterchainGasPaymaster.sol\";\nimport \"./Interfaces/IInterchainQueryRouter.sol\";\n\n//Users can upgrade their cookie and earn more\n//For example, a user can do a cursor upgrade and earn 0.1 cookies per second\n//Users are given an ERC20 token called cookies(right now just points)\ninterface ZKaptchaInterface {\n    function verifyZkProof(bytes calldata zkProof) external view returns (bool);\n}\n\ncontract CookieClicker {\n    address immutable dev;\n    IMailbox immutable mailBox;\n    IInterchainQueryRouter public immutable queryRouter;\n    IInterchainGasPaymaster public immutable interchainGasPaymaster;\n    event captchaNeededForUser(address indexed user);\n\n    modifier sessionStarted(address user) {\n        //The game only works if a session was started\n        require(block.timestamp <= mostRecentUserSession[user].expiraryDate);\n        require(mostRecentUserSession[user].sessionActive);\n        _;\n    }\n    modifier onlyDev() {\n        //The game only works if a session was started\n        require(msg.sender == dev);\n        _;\n    }\n    modifier userHasStarted(address user) {\n        if (userCookie[user].interestLastComputed == 0) {\n            //If user has not started, then give set them at current timestamp\n            userCookie[user].interestLastComputed = block.timestamp;\n        }\n        _;\n    }\n    uint32 public constant arbGoerliDomainID = 421613;\n\n    // implement ZKaptcha anti-bot in your smart contract\n\n    constructor(\n        address arbogerliMailBoxAddy,\n        address argbGoerliQueryAddy,\n        address arbGasAddy\n    ) {\n        dev = msg.sender;\n        idToUpgrade[1] = Upgrade(10, 1, 0);\n        idToUpgrade[2] = Upgrade(10, 0, 1);\n        queryRouter = IInterchainQueryRouter(argbGoerliQueryAddy);\n        mailBox = IMailbox(arbogerliMailBoxAddy);\n        interchainGasPaymaster = IInterchainGasPaymaster(arbGasAddy);\n    }\n\n    mapping(address => cookieGame) public userCookie;\n    mapping(address => GameSession) public mostRecentUserSession;\n    mapping(uint256 => Upgrade) public idToUpgrade;\n    mapping(address => mapping(uint256 => uint256)) public idUserToNum; //Tracks the number of purchases of a single upgrade\n\n    struct cookieGame {\n        uint256 totalClicks;\n        uint256 totalSpent;\n        uint256 cookiePerSecond; //Users can earn more per second\n        uint256 interestLastComputed;\n        uint256 clickModifier;\n    }\n    struct GameSession {\n        uint256 expiraryDate;\n        bool sessionActive;\n        bytes32 sessionHash;\n        cookieGame sessionGame;\n        uint256 userInterest;\n    }\n    struct Upgrade {\n        //Turn into NFT in future\n        uint256 cost;\n        uint256 cookieRateBooster;\n        uint256 clickModiferBooster;\n    }\n\n    function createCookie() public userHasStarted(msg.sender) {\n        //Make sure user does block.timestamp first\n        userCookie[msg.sender] = cookieGame(0, 0, 0, block.timestamp, 0);\n    }\n\n    function click() public userHasStarted(msg.sender) {\n        userCookie[msg.sender].totalClicks +=\n            1 +\n            userCookie[msg.sender].clickModifier;\n    }\n\n    function simulateClick(\n        address user\n    ) public view returns (uint256 clickAmount) {\n        clickAmount +=\n            1 +\n            mostRecentUserSession[user].sessionGame.clickModifier;\n    }\n\n    mapping(address => userCaptchaInformation) public userCaptchaInfo;\n    uint256 public timeSpent;\n\n    function giveUserCaptcha(address user) public onlyDev {\n        userCaptchaInfo[user] = userCaptchaInformation(\n            false,\n            block.timestamp,\n            0\n        );\n    }\n\n    struct userCaptchaInformation {\n        bool finished;\n        uint256 captchaStart;\n        uint256 captchEnd;\n    }\n\n    // alignment preserving cast\n\n    function submitCaptcha(\n        uint32 _destinationDomain,\n        address captchaContract,\n        uint256 gasAmount,\n        //string memory message,\n        bytes memory message,\n        address user\n    ) external payable {\n        bytes32 _messageId = mailBox.dispatch(\n            arbGoerliDomainID,\n            addressToBytes32(captchaContract),\n            abi.encode(message, user)\n            //abi.encode(message)\n        );\n    }\n\n    uint256 public returnedNum;\n    uint256 public worked;\n\n    function handle(\n        uint32 _origin,\n        bytes32 _sender,\n        bytes calldata _message\n    ) external {\n        worked = 31213;\n        (uint256 numRes, address user) = abi.decode(\n            _message,\n            (uint256, address)\n        );\n        if (numRes == 2) {\n            returnedNum = 321;\n            userCaptchaInfo[user].captchEnd = block.timestamp;\n            userCaptchaInfo[user].finished = true;\n        }\n        if (numRes == 1) {\n            returnedNum = 123;\n            userCaptchaInfo[user].captchEnd += 1;\n            userCaptchaInfo[user].finished = false;\n        }\n    }\n\n    //Might make it so that a user has to send a transaction when they purchase an upgrade\n    //Whenever a user purchases a cookie, the program adds up their interest\n    function purchaseUpgrade(uint256 upgradeID) public {\n        idUserToNum[msg.sender][upgradeID]++;\n        uint256 cookieBalance = getUserCookieBalance(msg.sender);\n        userCookie[msg.sender].interestLastComputed = block.timestamp;\n        require(cookieBalance >= idToUpgrade[upgradeID].cost);\n        userCookie[msg.sender].totalSpent +=\n            idToUpgrade[upgradeID].cost *\n            idUserToNum[msg.sender][upgradeID];\n        userCookie[msg.sender].cookiePerSecond += idToUpgrade[upgradeID]\n            .cookieRateBooster;\n        userCookie[msg.sender].clickModifier += idToUpgrade[upgradeID]\n            .clickModiferBooster;\n    }\n\n    function purchaseUpgradeForUser(\n        address user,\n        uint256 upgradeID\n    ) public onlyDev {\n        //We are going to be applying a debt to the user\n        idUserToNum[msg.sender][upgradeID]++;\n        require(idToUpgrade[upgradeID].cost > 0, \"Not Real ID\");\n        mostRecentUserSession[user].sessionGame.totalSpent +=\n            idToUpgrade[upgradeID].cost *\n            idUserToNum[msg.sender][upgradeID];\n        mostRecentUserSession[user].userInterest = getSessionUserInterest(user);\n\n        //require(cookieBalance >= idToUpgrade[upgradeID].cost);\n        mostRecentUserSession[user].sessionGame.cookiePerSecond += idToUpgrade[\n            upgradeID\n        ].cookieRateBooster;\n        mostRecentUserSession[user].sessionGame.clickModifier += idToUpgrade[\n            upgradeID\n        ].clickModiferBooster;\n        userCookie[user].interestLastComputed = block.timestamp; //Resetting interest\n    }\n\n    function getSessionUserInterest(\n        address user\n    ) public view returns (uint256 interestEarned) {\n        uint256 timePassed = block.timestamp -\n            userCookie[user].interestLastComputed;\n\n        interestEarned =\n            timePassed *\n            mostRecentUserSession[user].sessionGame.cookiePerSecond;\n    }\n\n    function getUserInterest(\n        address user\n    ) public view returns (uint256 interestEarned) {\n        uint256 timePassed = block.timestamp -\n            userCookie[user].interestLastComputed;\n\n        interestEarned = timePassed * userCookie[user].cookiePerSecond;\n        if (mostRecentUserSession[user].sessionActive) interestEarned = 0; //If there is already a session then dont count regular interest NO DOUBLE DIPPING\n    }\n\n    function getUserCookieBalance(\n        address user\n    ) public view returns (uint256 cookieBalance) {\n        cookieGame memory currentGame = userCookie[user];\n        uint256 interestEarned = getUserInterest(user);\n        cookieBalance =\n            currentGame.totalClicks -\n            currentGame.totalSpent +\n            interestEarned;\n    }\n\n    function startSession(\n        bytes32 createdHash,\n        uint256 sessionLength\n    ) public userHasStarted(msg.sender) {\n        mostRecentUserSession[msg.sender].sessionHash = createdHash;\n        mostRecentUserSession[msg.sender].expiraryDate =\n            block.timestamp +\n            sessionLength;\n        //Set the session cookie rate as the users current rate\n        mostRecentUserSession[msg.sender]\n            .sessionGame\n            .cookiePerSecond = userCookie[msg.sender].cookiePerSecond;\n        //Set the session click modifier as the user's current modifier\n        mostRecentUserSession[msg.sender]\n            .sessionGame\n            .clickModifier = userCookie[msg.sender].clickModifier;\n\n        mostRecentUserSession[msg.sender].sessionActive = true;\n    }\n\n    function createHash(\n        uint256 browserID,\n        address userAddy\n    ) public pure returns (bytes32 newHash) {\n        newHash = keccak256(abi.encodePacked(browserID, userAddy));\n    }\n\n    function verifySession(\n        uint256 browserID, //We can make this bytes\n        address userAddy\n    ) public view returns (bool valid) {\n        valid = mostRecentUserSession[userAddy].sessionHash ==\n            keccak256(abi.encodePacked(browserID, userAddy))\n            ? true\n            : false;\n    }\n\n    function endSession() public {\n        //Allows a user to end a session and prevent it from happening\n        mostRecentUserSession[msg.sender].sessionActive = false;\n        //We could have an event fire off or something\n    }\n\n    function completeSession(\n        uint256 browserID,\n        address userAddress\n    ) public onlyDev sessionStarted(userAddress) {\n        require(verifySession(browserID, userAddress));\n        userCookie[userAddress].totalClicks += mostRecentUserSession[\n            userAddress\n        ].sessionGame.totalClicks;\n        uint256 userDebt = mostRecentUserSession[userAddress]\n            .sessionGame\n            .totalSpent;\n        uint256 userInterest = mostRecentUserSession[userAddress].userInterest;\n\n        require(getUserCookieBalance(userAddress) + userInterest >= userDebt);\n        userCookie[userAddress].totalSpent += userDebt;\n        userCookie[userAddress].clickModifier = mostRecentUserSession[\n            userAddress\n        ].sessionGame.clickModifier;\n        userCookie[userAddress].cookiePerSecond = mostRecentUserSession[\n            userAddress\n        ].sessionGame.cookiePerSecond;\n        mostRecentUserSession[userAddress].sessionActive = false;\n        userCookie[userAddress].interestLastComputed = block.timestamp; //Resetting interest\n\n        delete mostRecentUserSession[userAddress];\n    }\n\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(_addr)));\n    }\n\n    function interchainSecurityModule() external pure returns (address) {\n        return 0x5Fe9b2cAcD42593408A49D97aa061a1666C595E9;\n    }\n}\n"
    },
    "contracts/Interfaces/IInterchainGasPaymaster.sol": {
      "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity >=0.6.11;\n\n/**\n * @title IInterchainGasPaymaster\n * @notice Manages payments on a source chain to cover gas costs of relaying\n * messages to destination chains.\n */\ninterface IInterchainGasPaymaster {\n    /**\n     * @notice Emitted when a payment is made for a message's gas costs.\n     * @param messageId The ID of the message to pay for.\n     * @param gasAmount The amount of destination gas paid for.\n     * @param payment The amount of native tokens paid.\n     */\n    event GasPayment(\n        bytes32 indexed messageId,\n        uint256 gasAmount,\n        uint256 payment\n    );\n\n    function payForGas(\n        bytes32 _messageId,\n        uint32 _destinationDomain,\n        uint256 _gasAmount,\n        address _refundAddress\n    ) external payable;\n\n    function quoteGasPayment(\n        uint32 _destinationDomain,\n        uint256 _gasAmount\n    ) external view returns (uint256);\n}\n"
    },
    "contracts/Interfaces/IInterchainQueryRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\ninterface IInterchainQueryRouter {\n    /**\n     * @param _destinationDomain Domain of destination chain\n     * @param target The address of the contract to query on destination chain.\n     * @param queryData The calldata of the view call to make on the destination\n     * chain.\n     * @param callback Callback function selector on `msg.sender` and optionally\n     * abi-encoded prefix arguments.\n     * @return messageId The ID of the Hyperlane message encoding the query.\n     */\n    function query(\n        uint32 _destinationDomain,\n        address target,\n        bytes calldata queryData,\n        bytes calldata callback\n    ) external returns (bytes32);\n\n    /**\n     * @param _destinationDomain Domain of destination chain\n     * @param call The target address of the contract to query on destination\n     * chain, and the calldata of the view call to make.\n     * @param callback Callback function selector on `msg.sender` and optionally\n     * abi-encoded prefix arguments.\n     * @return messageId The ID of the Hyperlane message encoding the query.\n     */\n    function query(\n        uint32 _destinationDomain,\n        Call calldata call,\n        bytes calldata callback\n    ) external returns (bytes32);\n\n    /**\n     * @param _destinationDomain Domain of destination chain\n     * @param calls Array of calls (to and data packed struct) to be made on\n     * destination chain in sequence.\n     * @param callbacks Array of callback function selectors on `msg.sender`\n     * and optionally abi-encoded prefix arguments.\n     */\n    function query(\n        uint32 _destinationDomain,\n        Call[] calldata calls,\n        bytes[] calldata callbacks\n    ) external returns (bytes32);\n\n    struct Call {\n        address to;\n        bytes data;\n    }\n}\n"
    },
    "contracts/Interfaces/IInterchainSecurityModule.sol": {
      "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity >=0.6.11;\n\ninterface IInterchainSecurityModule {\n    enum Types {\n        UNUSED,\n        ROUTING,\n        AGGREGATION,\n        LEGACY_MULTISIG,\n        MULTISIG\n    }\n\n    /**\n     * @notice Returns an enum that represents the type of security model\n     * encoded by this ISM.\n     * @dev Relayers infer how to fetch and format metadata.\n     */\n    function moduleType() external view returns (uint8);\n\n    /**\n     * @notice Defines a security model responsible for verifying interchain\n     * messages based on the provided metadata.\n     * @param _metadata Off-chain metadata provided by a relayer, specific to\n     * the security model encoded by the module (e.g. validator signatures)\n     * @param _message Hyperlane encoded interchain message\n     * @return True if the message was verified\n     */\n    function verify(\n        bytes calldata _metadata,\n        bytes calldata _message\n    ) external returns (bool);\n}\n\ninterface ISpecifiesInterchainSecurityModule {\n    function interchainSecurityModule()\n        external\n        view\n        returns (IInterchainSecurityModule);\n}\n"
    },
    "contracts/Interfaces/IMailbox.sol": {
      "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity >=0.8.0;\n\nimport {IInterchainSecurityModule} from \"./IInterchainSecurityModule.sol\";\n\ninterface IMailbox {\n    // ============ Events ============\n    /**\n     * @notice Emitted when a new message is dispatched via Hyperlane\n     * @param sender The address that dispatched the message\n     * @param destination The destination domain of the message\n     * @param recipient The message recipient address on `destination`\n     * @param message Raw bytes of message\n     */\n    event Dispatch(\n        address indexed sender,\n        uint32 indexed destination,\n        bytes32 indexed recipient,\n        bytes message\n    );\n\n    /**\n     * @notice Emitted when a new message is dispatched via Hyperlane\n     * @param messageId The unique message identifier\n     */\n    event DispatchId(bytes32 indexed messageId);\n\n    /**\n     * @notice Emitted when a Hyperlane message is processed\n     * @param messageId The unique message identifier\n     */\n    event ProcessId(bytes32 indexed messageId);\n\n    /**\n     * @notice Emitted when a Hyperlane message is delivered\n     * @param origin The origin domain of the message\n     * @param sender The message sender address on `origin`\n     * @param recipient The address that handled the message\n     */\n    event Process(\n        uint32 indexed origin,\n        bytes32 indexed sender,\n        address indexed recipient\n    );\n\n    function localDomain() external view returns (uint32);\n\n    function delivered(bytes32 messageId) external view returns (bool);\n\n    function defaultIsm() external view returns (IInterchainSecurityModule);\n\n    function dispatch(\n        uint32 _destinationDomain,\n        bytes32 _recipientAddress,\n        bytes calldata _messageBody\n    ) external returns (bytes32);\n\n    function process(\n        bytes calldata _metadata,\n        bytes calldata _message\n    ) external;\n\n    function count() external view returns (uint32);\n\n    function root() external view returns (bytes32);\n\n    function latestCheckpoint() external view returns (bytes32, uint32);\n\n    function recipientIsm(\n        address _recipient\n    ) external view returns (IInterchainSecurityModule);\n}\n"
    },
    "contracts/Interfaces/IMessageRecipient.sol": {
      "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity >=0.6.11;\n\ninterface IMessageRecipient {\n    function handle(\n        uint32 _origin,\n        bytes32 _sender,\n        bytes calldata _message\n    ) external;\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 2000,
      "details": {
        "yul": true
      }
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}